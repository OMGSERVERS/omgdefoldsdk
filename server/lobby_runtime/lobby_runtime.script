local omgruntime = require("omgservers.omgruntime.omgruntime")

local SERVER_EVENT_HASH = hash("server_event")

local function handle_started(self)
	print(os.date() .. " [LOBBY_RUNTIME] Lobby started")
end

local function handle_message(self, message_qualifier, message_body)
	print(os.date() .. " [LOBBY_RUNTIME] Message received, qualifier=" .. tostring(message_qualifier))

	if message_qualifier == omgruntime.constants.messages.RUNTIME_CREATED then
		local runtime_config = message_body.runtime_config
		print(os.date() .. " [LOBBY_RUNTIME] Runtime initialized:")
		pprint(runtime_config.lobby)
		pprint(runtime_config.version)

	elseif message_qualifier == omgruntime.constants.messages.CLIENT_ASSIGNED then
		local user_id = message_body.user_id
		local client_id = message_body.client_id
		local profile = message_body.profile
		print(os.date() .. " [LOBBY_RUNTIME] Client " .. client_id .. " of user " .. user_id .. " assigned")
		print(os.date() .. " [LOBBY_RUNTIME] Profile:")
		pprint(profile)

		omgruntime:request_matchmaking(client_id, "game")

	elseif message_qualifier == omgruntime.constants.messages.CLIENT_REMOVED then
		local client_id = message_body.client_id
		print(os.date() .. " [LOBBY_RUNTIME] Client " .. client_id .. " removed")

	elseif message_qualifier == omgruntime.constants.messages.MESSAGE_RECEIVED then
		local client_id = message_body.client_id
		local message = message_body.message
		print(os.date() .. " [LOBBY_RUNTIME] Message from client " .. tostring(client_id) .. " received:")
		pprint(message)
	else
		print(os.date() .. " [LOBBY_RUNTIME] Unsupported message received, qualifier=" .. tostring(message_qualifier))
	end
end

function on_message(self, message_id, message, sender)
	if message_id == SERVER_EVENT_HASH then
		local event = message
		local event_qualifier = event.qualifier
		local event_body = event.body

		if event_qualifier == omgruntime.constants.events.SERVER_STARTED then
			handle_started(self)

		elseif event_qualifier == omgruntime.constants.events.MESSAGE_RECEIVED then
			local message_qualifier = event_body.qualifier
			local message_body = event_body.body
			handle_message(self, message_qualifier, message_body)
		else
			print("[LOBBY_RUNTIME] Unsupported event received, qualifier=" .. tostring(event_qualifier))
		end
	end
end